using MetroFramework.Controls;
using MetroFramework.Forms;
using System;
using System.IO;
using System.Windows.Forms;

namespace Builder.Forms_Add_Wallets
{
    public partial class Add_Wallets : MetroForm
    {
        public static string wallets_adress;
        public static string wallets_nums;
        public static string title_name;

        public Add_Wallets(string wallets, string num, string t)
        {
            
            wallets_adress = wallets;
            wallets_nums = num;
            title_name = t;
            
            InitializeComponent();
            metroLabel3.Text = title_name;
        }

        private void metroButton1_Click(object sender, EventArgs e)
        {
            try
            {
                string adress = "";
                foreach (string item in metroTextBox1.Text.Split('\n'))
                {
                    adress += item.Trim() + ",".Trim();
                }

                string formated = adress.Remove(adress.Length - 1);
                string num_adr = metroTextBox1.Lines.Length.ToString();

                if (title_name.Contains("Bitcoin/p2pkh/p2wpkh-p2sh"))
                {
                    Properties.Settings.Default.BTC = formated;
                    Properties.Settings.Default.BTC_num = num_adr;
                }

                if (title_name.Contains("Bitcoin/p2wpkh Adress (bc1...)"))
                {
                    Properties.Settings.Default.BTC_bc1 = formated;
                    Properties.Settings.Default.BTC_bc1_num = num_adr;
                }

                if (title_name.Contains("BinanceCoin/BNB"))
                {
                    Properties.Settings.Default.bnb = formated;
                    Properties.Settings.Default.bnb_num = num_adr;
                }

                if (title_name.Contains("BitcoinCash/BCH"))
                {
                    Properties.Settings.Default.BCH = formated;
                    Properties.Settings.Default.BCH_num = num_adr;
                }

                if (title_name.Contains("Dash/DASH"))
                {
                    Properties.Settings.Default.dash = formated;
                    Properties.Settings.Default.dash_num = num_adr;
                }

                if (title_name.Contains("DOGE"))
                {
                    Properties.Settings.Default.DOGE = formated;
                    Properties.Settings.Default.DOGE_num = num_adr;
                }

                if (title_name.Contains("Ethereum/ETH/ERC20"))
                {
                    Properties.Settings.Default.ETH = formated;
                    Properties.Settings.Default.ETH_num = num_adr;
                }

                if (title_name.Contains("LiteCoin/LTC"))
                {
                    Properties.Settings.Default.LTC = formated;
                    Properties.Settings.Default.LTC_num = num_adr;
                }

                if (title_name.Contains("Monero/XMR"))
                {
                    Properties.Settings.Default.XMR = formated;
                    Properties.Settings.Default.XMR_num = num_adr;
                }

                if (title_name.Contains("Neocoin/NEC"))
                {
                    Properties.Settings.Default.nec = formated;
                    Properties.Settings.Default.nec_num = num_adr;
                }

                if (title_name.Contains("Ripple/XRP"))
                {
                    Properties.Settings.Default.xrp = formated;
                    Properties.Settings.Default.xrp_num = num_adr;
                }

                if (title_name.Contains("Stellar/XLM"))
                {
                    Properties.Settings.Default.xlm = formated;
                    Properties.Settings.Default.xlm_num = num_adr;
                }

                if (title_name.Contains("TRON/TRX/TRC20"))
                {
                    Properties.Settings.Default.trx = formated;
                    Properties.Settings.Default.trx_num = num_adr;
                }

                if (title_name.Contains("ZCash/ZEC"))
                {
                    Properties.Settings.Default.zcash = formated;
                    Properties.Settings.Default.zcash_num = num_adr;
                }

                Properties.Settings.Default.Save();
                MessageBox.Show($"Addresses {title_name} {"\n"} {num_adr} {"\n"} SAVE!", "Successfully!", MessageBoxButtons.OK, MessageBoxIcon.Information);
                Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString(), "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void metroTextBox1_Click(object sender, EventArgs e)
        {
           // LoadTxt();
        }

        private void Add_Wallets_Load(object sender, EventArgs e)
        {
            if (wallets_adress != "")
            {
                string wal = "";
                foreach (string item in wallets_adress.Split(','))
                {
                    wal += item + Environment.NewLine;
                }
                metroTextBox1.Text = wal.Remove(wal.Length - 1);
            }
        }

        public void LoadTxt() 
        {
            metroTextBox1.Text = "";
            using (OpenFileDialog ofd = new OpenFileDialog())
            {
                ofd.Title = "Select *.txt file with addresses 1 per line...";
                ofd.Filter = ".txt (*.txt)|*.txt";
                ofd.Multiselect = false;
                if (ofd.ShowDialog() == DialogResult.OK)
                {
                    string[] lines = File.ReadAllLines(ofd.FileName);

                    foreach (string s in lines)
                    {
                        metroTextBox1.Text += s + Environment.NewLine;
                    }
                }
                metroButton3.Text = ofd.FileName;
                metroLabel2.Text = metroTextBox1.Lines.Length.ToString();
            }
        }

        private void metroButton3_Click(object sender, EventArgs e)
        {
            LoadTxt();
        }

        private void timer1_Tick(object sender, EventArgs e)
        {
            metroLabel2.Text = metroTextBox1.Lines.Length.ToString();
        }
    }
}
